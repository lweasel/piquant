"""
Functions for writing Polyester R scripts
"""

from . import file_writer as fw

MAIN_TRANSCRIPTS = "main"
NOISE_TRANSCRIPTS = "noise"
TRANSCRIPT_FILE = "polyester.transcripts.fa"
LIBRARY_LIST = ["Biostrings","dplyr","readr","polyester"]
PROFILE_DATA_VARIABLE = "pro_data"
TRANSCRIPT_ID_COLUMN_VARIABLE = "Transcript_ID"
LENGTH_COLUMN_VARIABLE = "Length"
EXPRESSED_FRACTION_VARIABLE = "Expressed_Fraction"
EXPRESSED_NUMBER_COLUMN_VARIABLE = "Expressed_Number"
PROFILE_COLUMNS = ["Locus",TRANSCRIPT_ID_COLUMN_VARIABLE,"Coding",LENGTH_COLUMN_VARIABLE,EXPRESSED_FRACTION_VARIABLE,EXPRESSED_NUMBER_COLUMN_VARIABLE,"Library_Fraction","Library_Number","Sequenced_Fraction","Sequenced_Number","Covered_Fraction","Chi_Square","Coefficient_of_Variation"]
TOTAL_TRANSCRIPT_LENGTH_VARIABLE = "total_transcript_length"
READ_NUMBER_VARIABLE = "read_number"
READ_DEPTH_VARIABLE = "read_depth"
READ_LENGTH_VARIABLE = "read_length"
PAIRED_END_VARIABLE = "paired_end"
ERRORS_VARIABLE = "errors"
ERROR_RATE_VARIABLE = "error_rate"
STRANDED_VARIABLE = "stranded"
BIAS_MODEL_VARIABLE = "bias_model"
PERCENTAGE_VARIABLE = "percentage"
TRANSCRIPT_FILE_VARIABLE = "transcript_file"
PRO_FILE_VARIABLE = "pro_file"
READS_DIR_VARIABLE = "reads_dir"
EXPRESSION_OUT_FILE_VARIABLE = "expression_out_file"
TOTAL_LXE_VARIABLE = "total_LXE"
COUNT_COLUMN_VARIABLE = "Count"
TRANSCRIPT_ID_VARIABLE = "transcript_id"
COUNT_MAT_VARIABLE = "count_mat"
TEMPORARY_DIRECTORY = "polyester_tmp"
SIMULATED_READS_PREFIX = "sample_01"
READS_PREFIX = "reads"

def get_polyester_expression_profile(transcript_set):
    return "polyester_simulator_{trans_set}_expression.out".format(
            trans_set=transcript_set)


def get_flux_expression_profile(transcript_set):
    return "flux_simulator_{transcripts}_expression.pro".format(
            transcripts=transcript_set)


def get_reads_file(file_type,paired_end=None, intermediate=False,
        transcript_set=None):
    reads_file = READS_PREFIX
    if transcript_set:
        reads_file = transcript_set + "_" + reads_file
    if not intermediate:
        reads_file += "_final"
    if paired_end == 1:
        reads_file += ".1"
    if paired_end == 2:
        reads_file += ".2"
    return reads_file + "." + file_type


def get_simulated_reads_file(paired_end=None):
    reads_file = SIMULATED_READS_PREFIX
    if paired_end == 1:
        reads_file += "_1"
    if paired_end == 2:
        reads_file += "_2"
    reads_file += ".fasta"
    return reads_file


def _get_polyester_simulator_file(transcript_set):
    return "polyester_simulator_{trans_set}.R".format(
            trans_set=transcript_set)


def _add_top_comment(writer):
    writer.add_comment("Read the abundance of each transcript from flux expression pro file. Run the polyester simulation using transcript fasta files generated by rsem-prepare-reference.")


def _add_library(writer):
    writer._add_line("")
    writer.add_comment("Import the needed libraries")
    writer.add_library(LIBRARY_LIST)


def _get_variables(
        reads_dir,read_depth, read_length, paired_end,
        errors, stranded, bias, noise_perc, transcript_set):
    pro_file = get_flux_expression_profile(transcript_set)
    bias_model = "rnaf" if bias else "none"
    params_dict = {
            READ_DEPTH_VARIABLE: read_depth,
            READ_LENGTH_VARIABLE: read_length,
            PAIRED_END_VARIABLE: paired_end,
            STRANDED_VARIABLE: stranded,
            BIAS_MODEL_VARIABLE: bias_model,
            TRANSCRIPT_FILE_VARIABLE: TRANSCRIPT_FILE,
            PRO_FILE_VARIABLE: pro_file,
            READS_DIR_VARIABLE: reads_dir,
            EXPRESSION_OUT_FILE_VARIABLE: get_polyester_expression_profile(transcript_set)}
    if errors:
        errors = "illumina5"
    else:
        errors = "uniform"
        error_rate = 0
        params_dict[ERROR_RATE_VARIABLE] = error_rate
    params_dict[ERRORS_VARIABLE] = errors
    if transcript_set != MAIN_TRANSCRIPTS:
        params_dict[PERCENTAGE_VARIABLE] = round(noise_perc,2)/100
    else:
        params_dict[PERCENTAGE_VARIABLE] = 1
    return params_dict


def _add_variables(writer,reads_dir,read_depth, read_length,
        paired_end, errors, stranded, bias, noise_perc, transcript_set):
    writer._add_line("")
    writer.add_comment("Set sequencing parameters and file names")
    my_vars = _get_variables(
            reads_dir, read_depth, read_length, paired_end,
            errors, stranded, bias, noise_perc, transcript_set)
    for var,val in my_vars.items():
        writer.add_variable(var,val,True)


def _add_profile_import(writer):
    writer._add_line("")
    writer.add_comment("Import the expression profile data and add column names to it.")
    column_names = writer.get_vector_value(PROFILE_COLUMNS)
    writer.add_function_variable(PROFILE_DATA_VARIABLE,"read_tsv",{"file":PRO_FILE_VARIABLE, "col_names":column_names})


def _add_calculate_total_read_number(writer):
    expressed_number_column = writer.get_dataframe_column(PROFILE_DATA_VARIABLE,EXPRESSED_NUMBER_COLUMN_VARIABLE)
    my_condition = writer.get_expression(expressed_number_column,">",0)
    my_index_spec = writer.call_function("which",{"x":my_condition})
    my_index = writer.get_indices_specification(my_index_spec)
    my_data = writer.get_dataframe_column(PROFILE_DATA_VARIABLE,LENGTH_COLUMN_VARIABLE) + my_index
    writer._add_line("")
    writer.add_comment("Calculate the total number of simulated reads")
    writer.add_function_variable(TOTAL_TRANSCRIPT_LENGTH_VARIABLE,"sum",{"abbrev_1":my_data})
    my_read_number = writer.get_expression(writer.get_expression(TOTAL_TRANSCRIPT_LENGTH_VARIABLE,"*",READ_DEPTH_VARIABLE),"/",READ_LENGTH_VARIABLE)
    writer.add_variable(READ_NUMBER_VARIABLE,my_read_number,False)

def _add_calculate_the_sum_of_lengthXexpressed_fraction(writer):
    my_length = writer.get_dataframe_column(PROFILE_DATA_VARIABLE,LENGTH_COLUMN_VARIABLE)
    my_expressed_fraction = writer.get_dataframe_column(PROFILE_DATA_VARIABLE,EXPRESSED_FRACTION_VARIABLE)
    my_expression = writer.get_expression(my_length,"*",my_expressed_fraction)
    writer._add_line("")
    writer.add_comment("Calculate the sum of length * expressed fraction")
    writer.add_function_variable(TOTAL_LXE_VARIABLE,"sum",{"abbrev_1":my_expression})


def _add_count_column(writer):
    round_par = {"x":writer.get_long_expression(
        [PERCENTAGE_VARIABLE,EXPRESSED_FRACTION_VARIABLE,
            LENGTH_COLUMN_VARIABLE,READ_NUMBER_VARIABLE,TOTAL_LXE_VARIABLE],
        ["*","*","*","/"])}
    my_count = writer.call_function("round",round_par)
    mutate_par = {".data": PROFILE_DATA_VARIABLE,COUNT_COLUMN_VARIABLE:my_count}
    writer._add_line("")
    writer.add_comment("Add the count column")
    writer.add_function_variable(PROFILE_DATA_VARIABLE,"mutate",mutate_par)


def _add_sort_data(writer):
    readDNAStringSet_par = {"filepath":TRANSCRIPT_FILE_VARIABLE}
    my_names = writer.call_function("readDNAStringSet",readDNAStringSet_par)
    names_par = {"x":my_names}
    my_data = writer.call_function("names",names_par)
    data_par = {"data":my_data}
    writer._add_line("")
    writer.add_comment("Adjust transcripts in the order of the fasta file")
    writer.add_function_variable(TRANSCRIPT_ID_VARIABLE,"tbl_df",data_par)
    my_col = writer.call_function("colnames",{"x":TRANSCRIPT_ID_VARIABLE})
    writer.add_variable(my_col,TRANSCRIPT_ID_COLUMN_VARIABLE,True)
    inner_join_par = {"x":TRANSCRIPT_ID_VARIABLE,"y":PROFILE_DATA_VARIABLE}
    writer.add_function_variable(PROFILE_DATA_VARIABLE,"inner_join",inner_join_par)


def _add_write_out_expression_abundance(writer):
    write_table_par = {"x": PROFILE_DATA_VARIABLE,
            "file":EXPRESSION_OUT_FILE_VARIABLE}
    writer._add_line("")
    writer.add_comment("Write the expression abundance out to a file")
    writer._add_line(writer.call_function("write.table",write_table_par))


def _add_count_matrix(writer):
    matrix_par = {"data":writer.get_dataframe_column(PROFILE_DATA_VARIABLE,COUNT_COLUMN_VARIABLE)}
    writer._add_line("")
    writer.add_comment("Create count matrix")
    writer.add_function_variable(COUNT_MAT_VARIABLE,"matrix",matrix_par)


def _add_simulation_run(writer,errors):
    simulation_par = {"fasta":TRANSCRIPT_FILE_VARIABLE,"readmat":COUNT_MAT_VARIABLE,
                "paired":PAIRED_END_VARIABLE,"readlen":READ_LENGTH_VARIABLE,
                "error_model":ERRORS_VARIABLE,"strand_specific":STRANDED_VARIABLE,
                "bias":BIAS_MODEL_VARIABLE,"outdir":READS_DIR_VARIABLE}
    if not errors:
        simulation_par["error_rate"] = 0
    my_line = writer.call_function("simulate_experiment_countmat",simulation_par)
    writer._add_line("")
    writer.add_comment("Call the simulation run")
    writer._add_line(my_line)


def _write_read_simulation_R_script(
        reads_dir,read_depth, read_length, paired_end,
        errors, stranded, bias, noise_perc, transcript_set):
    with fw.writing_to_file(fw.RScriptWriter,reads_dir,_get_polyester_simulator_file(transcript_set)) as writer:
        _add_top_comment(writer)
        _add_library(writer)
        _add_variables(
                writer,reads_dir,read_depth, read_length, paired_end,
                errors, stranded, bias, noise_perc, transcript_set)
        _add_profile_import(writer)
        _add_calculate_total_read_number(writer)
        _add_calculate_the_sum_of_lengthXexpressed_fraction(writer)
        _add_count_column(writer)
        _add_sort_data(writer)
        _add_write_out_expression_abundance(writer)
        _add_count_matrix(writer)
        _add_simulation_run(writer,errors)


def _write_read_simulation_R_scripts(
        reads_dir,read_depth, read_length,
        paired_end, errors, stranded,
        bias, noise_perc):
    _write_read_simulation_R_script(
            reads_dir, read_depth, read_length,
            paired_end, errors, stranded,
            bias, noise_perc, MAIN_TRANSCRIPTS)
    if noise_perc != 0:
        _write_read_simulation_R_script(
                reads_dir, read_depth, read_length,
                paired_end, errors, stranded,
                bias, noise_perc, NOISE_TRANSCRIPTS)

